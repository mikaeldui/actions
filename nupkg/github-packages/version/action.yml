name: Get GitHub Packages Version for nupkg
description: Get the GitHub Packages version for published a nupkg.
inputs:
  path: 
    description: 'The path to the package pushed to GitHub Actions.'
    required: true
    default: '*.nupkg'
  GITHUB_TOKEN:
    type: string
    
outputs:
  id:
    description: 'The package ID, e.g. "3497268".'
    value: ${{ steps.github_package.outputs.id }}
  name:
    description: 'The name (version) of the package, e.g. "0.3.0".'
    value: ${{ steps.github_package.outputs.name }}
  url:
    description: The URL to the package.
    value: ${{ steps.github_package.outputs.url }}
  package_html_url:
    description: The HTML URL to the package.
    value: ${{ steps.github_package.outputs.package_html_url }}
  license:
    description: The package license.
    value: ${{ steps.github_package.outputs.license }}
  created_at:
    description: When the package was created.
    value: ${{ steps.github_package.outputs.created_at }}
  updated_at:
    description: When the package was updated.
    value: ${{ steps.github_package.outputs.updated_at }}
  description:
    description: The description of the package.
    value: ${{ steps.github_package.outputs.description }}
  html_url:
    description: The URL of the page for this package version.
    value: ${{ steps.github_package.outputs.html_url }}
    
runs:
  using: "composite"
  steps:
  
    - name: Get package info
      uses: mikaeldui/actions/nupkg/info@main
      id: package
      with:
        path: ${{ inputs.path }}
  
    - name: Get GitHub Package Version
      id: github_package
      uses: actions/github-script@v5
      with:
        script: |
          var packageVersions = await github.rest.packages.getAllPackageVersionsForPackageOwnedByUser({
            package_type: "nuget",
            package_name: "${{ steps.package.outputs.name }}",
            username: "${{ github.repository_owner }}",
          });

          console.log('Length: ' + packageVersions.length);

          console.log('packageVersions: ');
          console.dir(packageVersions);

          for (var i = 0; i < packageVersions.length; i++) {
              console.log('i: ' + i);
              var packageVersion = packageVersions[i];
              if (packageVersion.name != "${{ steps.package.outputs.version}}") continue;   
              Object.keys(packageVersion).forEach(function(key,index) {
                  // key: the name of the object key
                  // index: the ordinal position of the key within the object 
                  core.setOutput(key, packageVersion[index].toString())
              });
              return;
          }
